#include<iostream>
class Node{
    public:
    int val;
    Node*next;
    Node(int val){
        this->val=val;
        this->next=NULL;
    }
};
class Queue{
    public:
    Node*head;
    Node*tail;
    int size;
    Queue(){
        head=tail=NULL;
        size=0;
    }
    void push(int val){
        Node*temp=new Node(val);
        if(size==0) head=tail=temp;
        else{
            tail->next=temp;
            tail=temp;
        }
        size++;
    }
    void pop(){
        if(size==0) std::cout<<"Queue is empty";
        else{
            head=head->next;
        }
        size--;
    }
    int front(){
        if(size==0) {
            std::cout<<"Queue is empty";
            return -1;
        }
        else{
            return head->val;
        }
    }
    int back(){
        if(size==0) {
            std::cout<<"Queue is empty";
            return -1;
        }
        else{
            return tail->val;
        }
    }
    void display(){
        Node*temp=head;
        while(temp!=NULL){
            std::cout<<temp->val<<" ";
            temp=temp->next;
        }
        std::cout<<std::endl;
    }
    // void insertathead(int val){
    //     Node*temp=new Node(val);
    //     if(size==0){
    //         head=tail=temp;
    //     }
    //     else{
    //         temp->next=head;
    //         head=temp;
    //     }
    //     size++;
    // }
    
    
};
int main(){
     Queue s;
    s.push(10);
    s.push(20);
    s.display();
    s.push(30);
    s.push(40);
    s.push(50);
    s.push(60);
    s.display(); 
    s.pop();
    s.display(); 
    

}