#include<iostream>
#include <climits>
#include <queue>
#include<unordered_map>
class Node{
    public:
    int val;
    Node*left;
    Node*right;
    Node(int val){
        this->val=val;
        this->left=NULL;
        this->right=NULL;
    }
};
Node*construct(int arr[],int n){
    Node*root=new Node(arr[0]);
    std::queue<Node*> q;
    q.push(root);
    int i=1;
    int j=2;
    
    while(q.size()>0 && i<n){
        Node*temp=q.front();
        q.pop();
        Node*l;
        Node*r;
        if(arr[i]!=INT_MIN) l=new Node(arr[i]);
        else l=NULL;
         if(j!=n && arr[j]!=INT_MIN) r=new Node(arr[j]);
        else r=NULL;
        temp->left=l;
        temp->right=r;
        if(l!=NULL) q.push(l);
        if(r!=NULL) q.push(r);
        
        i+=2;
        j+=2;
    }
    return root;
}

int level(Node*root){
    if(root==NULL) return 0;
    return 1+std::max(level(root->left),level(root->right));
    
}

void display(Node*root,int curr,int leveli){
    if(root==NULL) return ;
    if(curr==leveli){
    std::cout<<root->val<<" ";
    return;
    }
    display(root->left,curr+1,leveli);
    display(root->right,curr+1,leveli);
}
void levelorder(Node*root){
    int n=level(root);
    for(int i=1;i<=n;i++){
        display(root,1,i);
        std::cout<<std::endl;
    }
}
void topview(Node*root){
    std::unordered_map<int,int> m;
    std::queue<std::pair<Node*,int>> q; //yaha par pair ka queue bana hai 
    
    std::pair<Node*,int> r;
    r.first=root;
    r.second=0;
     q.push(r);
    
    while(q.size()>0){
        Node*temp=(q.front()).first;  //root store karni hai   
        int level=(q.front()).second;
        q.pop();
        if(m.find(level)==m.end()){ ///nhi mila level
        m[level]=temp->val;
        }
        if(temp->left!=NULL){
            std::pair<Node*,int> p;
            p.first=temp->left;
            p.second=level-1;
            q.push(p);
        }
        if(temp->right!=NULL){
            std::pair<Node*,int> p;
            p.first=temp->right;
            p.second=level+1;
            q.push(p);
        }
    }
    int minlevel=INT_MAX;
    int maxlevel=INT_MIN;
    for(auto ele : m){
        int level=ele.first;
        minlevel=std::min(minlevel,level);
        maxlevel=std::min(maxlevel,level);
        
    }
    for(int i=minlevel;i<=maxlevel;i++){
        std::cout<<m[i]<<" ";
    }
    
    
   
}
int main(){
    int arr[]={1,2,3,4,5,INT_MIN,6,INT_MIN,INT_MIN,7,8};
    int n=sizeof(arr)/sizeof(arr[0]);
    Node*root=construct(arr,n);
    topview(root);
    
    
    
    
    
    
    
    
}
