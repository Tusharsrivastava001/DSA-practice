#include<iostream>
#include<algorithm>
class heap{
    public:
    int arr[100];
    int size;
    heap(){
        size=0;
        arr[0]=-1;
    }
    void insert(int val){
        size=size+1;
        int index=size;
        arr[index]=val;
        while(index>1){
            int parent=index/2;
            if(arr[parent]<arr[index]){
                std::swap(arr[parent],arr[index]);
                index=parent;
            }
            else{
                return;
            }
        }
    }
    void del(){
        if(size==0){
            std::cout<<"Nothing to delete";
            return;
        }
        //last element ko first index pe laya
        // 52 54 53 50 
        arr[1]=arr[size];
        size--;
        //now take the root to its current postion
        int i=1;
        while(i<size){
            int leftindex=2*i;
            int rightindex=2*i+1;
            if(leftindex<size && arr[i]<arr[leftindex]){
                std::swap(arr[leftindex],arr[i]);
                i=leftindex;
            }
            else if(rightindex<size && arr[i]<arr[rightindex]){
                std::swap(arr[i],arr[rightindex]);
            }
            else{
                return;
            }
        }
    }
    void print(){
        for(int i=1;i<=size;i++){
            std::cout<<arr[i]<<" ";
        }
    }
}; 
void heapify(int arr[],int n,int i){
    int largest=i;
    int left=2*i;
    int right=2*i+1;
    if(left<n && arr[largest]<arr[left]){
        largest=left;
    }
    if(right<n && arr[largest]<arr[right]){
        largest=right;
    }
    if(largest!=i){
        std::swap(arr[largest],arr[i]);
        heapify(arr,n,largest);
    }
    
}
int main(){
    heap h;
    h.insert(50);
    h.insert(55);
    h.insert(53);
    h.insert(52);
    h.insert(54);
    h.print();
    h.del();
    std::cout<<std::endl;
    h.print();
    std::cout<<std::endl;
    int arr[6]={-1,54,53,55,52,50};
    int n=5;
    for(int i=n/2;i>0;i--){
        heapify(arr,n,i);
    }
    for(int i=1;i<=n;i++){
        std::cout<<arr[i]<<" ";
    }
    
}