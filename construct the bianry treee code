#include<iostream>
#include<queue>
#include <climits>
class Node{
    public:
    int val;
    Node*left;
    Node*right;
    Node(int val){
        this->val=val;
        this->left=NULL;
        this->right=NULL;
    }
};
Node*construct(int arr[],int n){
    Node*root=new Node(arr[0]);
    std::queue<Node*> q;
    q.push(root);
    int i=1;
    int j=2;
    
    while(q.size()>0 && i<n){
        Node*temp=q.front();
        q.pop();
        Node*l;
        Node*r;
        if(arr[i]!=INT_MIN) l=new Node(arr[i]);
        else l=NULL;
         if(j!=n && arr[j]!=INT_MIN) r=new Node(arr[j]);
        else r=NULL;
        temp->left=l;
        temp->right=r;
        if(l!=NULL) q.push(l);
        if(r!=NULL) q.push(r);
        
        i+=2;
        j+=2;
    }
    return root;
}
void display(Node*root){
    if(root==NULL) return;
    std::cout<<root->val<<" ";
    display(root->left);
    display(root->right);
}
int main(){
    int arr[]={1,2,3,4,5,INT_MIN,6,INT_MIN,INT_MIN,7,8,9};
    int n=sizeof(arr)/sizeof(arr[0]);
    Node*root=construct(arr,n);
    display(root);
}




