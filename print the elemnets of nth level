void display(Node*root,int level){
    if(root==NULL) return ;
    if(level==3){
    std::cout<<root->val<<" ";
    }
    display(root->left,level+1);
    display(root->right,level+1);
}


#include<iostream>
#include<algorithm>
class Node{
    public:
    int val;
    Node*left;
    Node*right;
    Node(int val){
        this->val=val;
        this->left=NULL;
        this->right=NULL;
    }
};
void display(Node*root,int curr,int leveli){
    if(root==NULL) return ;
    if(curr==leveli){
    std::cout<<root->val<<" ";
    return;
    }
    display(root->left,curr+1,leveli);
    display(root->right,curr+1,leveli);
}
int level(Node*root){
    if(root==NULL) return 0;
    return 1+std::max(level(root->left),level(root->right));
    
}
void levelorder(Node*root){
    int n=level(root);
    for(int i=1;i<=n;i++){
        display(root,1,i);
        std::cout<<std::endl;
    }
}
void inorder(Node*root){
    if(root==NULL) return ;
   
    inorder(root->left);
     std::cout<<root->val<<" ";
    inorder(root->right);
}
void postorder(Node*root){
    if(root==NULL) return ;
   
    postorder(root->left);
    postorder(root->right);
    std::cout<<root->val<<" ";
}
int main(){
    Node*a=new Node(10);
    Node*b=new Node(20);
    Node*c=new Node(30);
    Node*d=new Node(40); 
    Node*e=new Node(50);
    Node*f=new Node(60);
    Node*g=new Node(70);
    a->left=b;
    a->right=c;
    b->left=d;
    b->right=e;
    c->left=f;
    c->right=g;
    levelorder(a);
    // display(a,1,3);
    // std::cout<<std::endl;
    
    // inorder(a);
    //   std::cout<<std::endl;
    // postorder(a);

    
    
}
