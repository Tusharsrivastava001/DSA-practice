class MyCircularQueue {
public:
    int f;
    int b;
    int s; //currect size
    int c; // capacity
    std::vector<int> arr;
    MyCircularQueue(int k) {
        f=0;
        b=0;
        s=0;
        c=k;
        std::vector<int> v(k);
        arr=v; 
    }
    
    bool enQueue(int value) { //push
        if(s==c) return false;
        arr[b]=value;
        b++;
        if(b==c) b=0; 
        s++;
        return true;  
    }
    bool deQueue() { //pop
        if(s==0) return false;
        f++;
        if(f==c) f=0;
        s--;
        return true;

    }
    int Front() { // front 
    if(s==0) return -1;
        return arr[f];
    }
    
    int Rear() { // accec the back
       if(s==0) return -1;
       if(b==0) return arr[c-1];
        return arr[b-1];
    }
    
    bool isEmpty() { 
       if(s==0) return true;
       else{
        return false;
       } 
    }
    
    bool isFull() { // s==k // k is the capacity
        if(s==c){
            return true;
        }
        else{
            return false;
        }
    }
};

/**
 * Your MyCircularQueue object will be instantiated and called as such:
 * MyCircularQueue* obj = new MyCircularQueue(k);
 * bool param_1 = obj->enQueue(value);
 * bool param_2 = obj->deQueue();
 * int param_3 = obj->Front();
 * int param_4 = obj->Rear();
 * bool param_5 = obj->isEmpty();
 * bool param_6 = obj->isFull();
 */