#include<iostream>
class Node{
    public:
    int val;
    Node*next;
    Node(int val){
        this->val=val;
        this->next=NULL;
    }
};
class Linkedlist{
    public:
    Node*head;
    Node*tail;
    int size;
    Linkedlist(){
        size=0;
        head=tail=NULL;
    }
    void insertAtEnd(int val){
        Node*temp=new Node(val);\
        if(size==0) head=tail=temp;// here if the size is zero then tail and head are Same
        else{
            tail->next=temp;
            tail=temp;
        }
        size++;
        
    }
    void insertAtHead(int val){
        Node*temp=new Node(val);
        if(size==0)head=tail=temp;
        else{
            temp->next=head;// address me head
            head=temp;
        }
    }
    void insertatidx(int idx,int val){
        if(idx<0 || idx>size) std::cout<<"Invalid index";
        else if(idx==0) insertAtHead(val);
        else if(idx==size) insertAtEnd(val);
        else{
            Node*t=new Node(val);
            Node*temp=head;
            for(int i=1;i<=idx-1;i++){
                temp=temp->next;
            }
            t->next=temp->next;
            temp->next=t;
            size++;
        }
    }
    void getelementbyidx(int idx){
        if(idx==0) std::cout<<head->val;
        else if (idx==size-1) std::cout<<tail->val;
        else{
            Node*temp=head;
            for(int i=1;i<=idx;i++){
                temp=temp->next;
            }
            std::cout<<temp->val;
        }
        std::cout<<std::endl;
    }
    void deleteAthead(){
        if(size==0) std::cout<<"List is empty";
        else{
            head=head->next;
            size--;
        }
    }
    void deleteAttail(){
        if(size==0) std::cout<<"LIST is empty";
        else{
            Node*temp=head;
            while(temp->next!=tail){
                temp=temp->next;
            }
            temp->next=NULL;
            temp=tail;
            size--;
        }
        
    }
    void deleteAtidx(int idx){
        Node*temp=head;
        for(int i=1;i<=idx-1;i++){
            temp=temp->next;
        }
        temp->next=temp->next->next;
        size--;
    }
    void display(){
        Node*temp=head;
        while(temp!=NULL){
            std::cout<<temp->val<<" ";
            temp=temp->next;
        }
        std::cout<<std::endl;
       
    }
};
int main(){
    Linkedlist ll;
    ll.insertAtEnd(10);
    ll.display();
    ll.insertAtEnd(20);
    ll.insertAtEnd(30);
    ll.insertAtEnd(40);
    ll.display();
    ll.insertAtHead(24);
    ll.display();
    ll.insertAtHead(90);
    ll.display();
    ll.insertatidx(3,80);
    ll.display();
    ll.getelementbyidx(3);
    ll.deleteAttail();
    ll.display();
    ll.deleteAthead();
    ll.display();
    ll.deleteAtidx(3);
    ll.display();

    
}